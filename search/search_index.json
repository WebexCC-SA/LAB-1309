{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"Excercise1/","title":"Lab 1 - Autonomous AI Agents with Knowledge Bases","text":""},{"location":"Excercise1/#excercise-1-build-autonomous-ai-agents-with-knowledge-bases","title":"Excercise 1 - Build Autonomous AI Agents with Knowledge Bases","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai  (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1! <p>AI Agents Overview</p> <p>Cisco Webex AI Agents provide automated assistance to customers before they interact with human agents across voice or digital channels. These agents leverage language understanding and contextual awareness within conversations. Residing within the CPaaS ecosystem, administrators can utilize the Webex AI Agent Studio platform to design, create, manage, and deploy these agents to meet customer service and support needs.</p> <p>Two primary types of AI Agents are currently available:</p> <ul> <li> <p>Autonomous AI Agents: These operate independently, making decisions and performing tasks without direct human intervention where the key capabilities include:</p> <ul> <li>Answering Questions: Accessing and utilizing a knowledge repository to provide informative and accurate responses to user queries.</li> <li>Performing Actions: Automating time-consuming or repetitive tasks by making choices based on information and predefined rules.</li> </ul> </li> <li> <p>Scripted AI Agents: These deliver precise and timely responses to customer inquiries in real-time. They execute tasks based on specific customer requests or inputs.</p> </li> </ul> <p>Integrating these agents into customer business ecosystems can significantly enhance customer experience by delivering personalized, real-time conversational interactions.  Furthermore, AI Agents can be easily scaled to accommodate high volumes of customer interactions without the need for additional human agents, leading to improved customer satisfaction and reduced operational costs.</p> <p>Prerequisites</p> <p>To ensure the WxCC Tenant can be enabled for this feature and that the feature can be used effectively, the following requirements must be adhered to:</p> <ul> <li>Webex Contact Center tenant with Flex 3 subscription and A-FLEX-AI-AGT SKU</li> <li>Webex Connect capability on the tenant.</li> </ul>"},{"location":"Excercise1/#objective","title":"Objective","text":"<p>In this lab, participants will learn to:</p> <ul> <li>Set up Autonomous AI Agents from scratch.</li> <li>Configure these agents to generate and present answers to queries by accessing and utilizing a knowledge repository.</li> <li>Create and manage the underlying knowledge base</li> </ul>"},{"location":"Excercise1/#section-1-create-webex-ai-agent-and-knowledge-base","title":"Section 1 : Create Webex AI Agent and Knowledge Base","text":"<ul> <li> <p>Since the task is to create autonomous AI agents that are capable of answering questions from a knowledge base, the first step would be to build that knowledge base.</p> </li> <li> <p>Sign in to Control Hub using the URL https://admin.webex.com.</p> </li> <li> <p>Use the credentials highlighted in the table above.</p> </li> <li> <p>In Quick Links on the right pane of the Contact Center suite section, click Webex AI Agent to access the studio.</p> <p></p> </li> <li> <p>On the Dashboard, click the Knowledge icon on the left navigation pane to go to the Knowledge Bases page.</p> <p></p> </li> <li> <p>Click + Create Knowledge Base on the upper right corner.</p> <p></p> </li> <li> <p>On the Create Knowledge Base page, enter the knowledge base name as WebexOne_KB_YourName.</p> </li> <li> <p>Click Create. The system creates a knowledge base with the specified name.</p> <p></p> </li> <li> <p>For this lab, let's add FAQ content specific to buying a cae. Download the word doc from the link below.</p> </li> </ul> <p>Buying Car FAQ</p> <ul> <li> <p>Drag and drop the file to the knowledge base. Alternatively, click Add File to add a file. </p> </li> <li> <p>DO Not Click on Process Button Yet</p> <p></p> </li> </ul> <p>Note</p> <pre><code>The system supports following file formats: PDF, DOC, DOCX, DOCX, TXT, XLSX, XLS and CSV. \nTXT file size cannot exceed 2 MB. All other file size cannot exceed 10MB.\n</code></pre> <ul> <li> <p>After adding the file, bring up the browser developer tool (Shortcut: Press F12 Key). </p> </li> <li> <p>Once the developer tool is up, ensure that it's on the \"Console\" tab.</p> </li> <li> <p>Clear the console logs by selecting the \"Clear Console\" button and click Process File to process them. </p> <p></p> <p></p> </li> <li> <p>When done, the system lists the files under the Files tab.</p> <p></p> </li> <li> <p>The browser logs will show a 'success' status, along with the 'kb_id', 'kb_category_id', and 'kb_documented_id'. </p> <p></p> </li> </ul> <p>Note</p> <p>This is essential information for Cisco TAC team to analyze and troubleshoot any issues that may have caused the upload to fail. </p> <ul> <li> <p>Navigate to the Information tab to view and track the details of the files you uploaded and the documents you created , KB ID is also present on the top left corner. </p> <p></p> </li> <li> <p>Now, it's time to create the AI agent itself.</p> </li> <li> <p>On the Dashboard, click +Create agent.</p> <p></p> </li> <li> <p>On the Create an AI Agent screen, click Start from scratch tile followed by Next button (bottom of the screen)</p> <p></p> </li> <li> <p>In the What type of agent are you building section, click Autonomous.</p> <p></p> </li> <li> <p>On the 'Add the essential details' specify the following details:</p> <ul> <li>Agent name: Enter the name of the AI agent susch as WebexOne_yourname</li> <li>System ID: A system-generated unique identifier. This field is editable.</li> <li>AI engine: Select the required AI engine from the drop-down list  (default its Webex AI Pro 1.0 ).</li> <li>Agent's goal: Provide a brief description of the AI agent's goal which in this case is to answer queries hence the prompt \"Answer queries about cars\". </li> <li>Click Create button at the bottom of the screen.</li> </ul> <p></p> </li> </ul> <p>Note</p> <pre><code>Create button is grayed out until all fields are populated.\n</code></pre> <ul> <li> <p>The autonomous AI agent for answering questions is successfully created and is now available on the Dashboard.</p> <p></p> </li> <li> <p>The Profile tab on the Agent Configuration page, after creation, allows you to change the agent's image, the AI engine it uses, its goal, and the welcome message displayed when the AI agent is launched.  </p> </li> <li> <p>These are the fields that control these aspects:</p> <ul> <li>URL for agent profile image: The default URL from which the system fetches the AI agent's logo or image.</li> <li>AI engine: The chosen AI engine is displayed.</li> <li>Welcome message: The default welcome message that the AI agent uses to start the interaction. </li> </ul> </li> </ul> <p>Note</p> <p>By default, Webex AI Pro 1.0 (with GPT 4.0) is the available AI engine.</p> <ul> <li> <p>Lets map the AI agent with the Knowledge base that was created.</p> </li> <li> <p>Navigate to Configurations &gt; Knowledge tab and choose the configured knowledge base from the drop-down list.</p> <p></p> </li> <li> <p>Click Save changes followed by Publish to make the AI agent live.</p> <p></p> </li> </ul>"},{"location":"Excercise1/#section-2-test-webex-ai-agent","title":"Section 2 : Test Webex AI Agent","text":"<ul> <li> <p>Now it's time to test the AI agent. Quick way to check if the agent is constructing and answering queries correctly is to use the Preview option.</p> <p></p> </li> <li> <p>Click the \"Preview\" button , a chat window appears in the bottom right corner of the pane where questions can be entered. Choose Start a chat option</p> <p></p> </li> <li> <p>To test in this example, we pose the question \"What warranty comes with the vehicle?\"</p> </li> <li> <p>The response provided was accurate and consistent with the knowledge base created for this AI agent.</p> <p></p> </li> <li> <p>The instruction section of the AI agent helps refine it to be more sophisticated and behave in the manner that the business dictates.</p> <p></p> </li> <li> <p>In this example, let's work on these three areas of the bot with the following instructions:</p> <ul> <li>Tone and Demeanor: Be polite, as the client is important.</li> <li>Role Definition: Answer the question in no more than 50 words.</li> <li>Response Guidelines: Thank the user for their interest and business.</li> </ul> </li> <li> <p>Add these guidelines to the Instructions section, save, and publish the changes.</p> <p></p> </li> <li> <p>To test, pose the same question: \"What warranty comes with the vehicle?\"</p> </li> <li> <p>As the Role Definition dictated answering within 50 words, you will see the answer within that limit.</p> <p></p> </li> <li> <p>You can now view the details of these sessions and the history of configuration changes performed on the AI agent through the Sessions section. </p> </li> <li> <p>This information is useful for auditing, analyzing, and improving the AI agent.</p> </li> <li> <p>From the left navigation pane, click Sessions.</p> <p></p> </li> <li> <p>The Sessions page appears, where each session is displayed as a record containing all the messages of the session, along with the following fields:</p> <p></p> <ul> <li>Channels: The channel where the interaction took place.</li> <li>Session ID: The unique room ID or session ID for a conversation.</li> <li>Room Metadata: Additional information about the room.</li> </ul> </li> <li> <p>Click on an individual row in the sessions table for a detailed view of that session.</p> </li> <li> <p>The system displays the following session details:</p> <p></p> <ul> <li>The left panel displays details about the transactions.</li> <li>The right panel displays details about slot filling and fulfillment related to all actions. This is applicable to actionable actions for the bot.</li> </ul> </li> <li> <p>Finally, to view the details of configuration changes performed on the AI agent, you can use the History tab in the navigation pane.</p> <p></p> </li> <li> <p>The History pane provides information about the version history and change logs.</p> </li> <li> <p>Please review this information at your convenience.</p> </li> </ul>"},{"location":"Excercise1/#result","title":"Result","text":"<ul> <li>Congratulations on finishing the lab! Now, let's dive into the next exercise to enhance this agent so it can perform actions.</li> </ul>"},{"location":"Excercise2/","title":"Lab 2 - Build Autonomous Webex AI Agent Actions","text":""},{"location":"Excercise2/#task-2-build-autonomous-webex-ai-agent-actions","title":"Task 2 - Build Autonomous Webex AI Agent Actions","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai  (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1!"},{"location":"Excercise2/#objective","title":"Objective","text":"<p>In this lab, audience will learn to explore and set up Autonomous Webex AI Agent actions using Webex Connect flows. They will also learn how to configure these flows to interact with external APIs, allowing the AI Agent to handle data and fulfill requests by connecting to other services.</p>"},{"location":"Excercise2/#section-1-create-a-webex-connect-flow-for-car-order","title":"Section 1 : Create a Webex Connect Flow for Car Order","text":"<ul> <li> <p>Action fulfillment for the agent is always handled via Webex Connect flows. </p> </li> <li> <p>Lets begin by creating a Webex Connect flow, which can later be selected to a specific Webex AI action.</p> </li> <li> <p>Navigate to the Webex Connect portal through the 'Quick Links' section in the Webex Contact Center area of Control Hub.</p> </li> </ul> <p></p> <ul> <li>Create a new service by clicking 'Create New Service' and providing a name Webexone_carorderservice_YourName_.</li> </ul> <p></p> <ul> <li>Navigate to 'Flows' section and click 'Create Flow'.</li> </ul> <p></p> <ul> <li>Proivde a 'Flow Name' (i.e. carcreateorder_name), ensure that 'Start from Scrach' is selected, and click 'Create'. </li> </ul> <p>Info</p> <p>This flow will interact with external database using API to create a car order.</p> <p></p> <ul> <li>In the next menu, select 'AI Agent' under 'Integrations'.</li> </ul> <p></p> <ul> <li>'Configure AI Agent Event' is displayed. Under 'Provide sample Json' provide the variables that will be passed from the Webex AI Agent. For a new car order, use the following: <pre><code>{\n\"model\": \"\",\n\"color\": \"\",\n\"engine\": \"\",\n\"customer\": \"\"\n}\n</code></pre></li> <li>Click 'Parse' and 'Save'.</li> </ul> <p></p> <ul> <li>Drag the 'HTTP Request' node from the left-hand side menu, place it next to the 'AI Agent' node, and connect them by clicking and holding the green dot on the 'AI Agent' node and dragging it to the 'HTTP Request' node.</li> </ul> <p></p> <ul> <li>Double click on the 'HTTP Request' node and fill the fields as follows:</li> </ul> Field name Value <code>Method</code> PUT <code>Endpoint URL</code> https://68085a3f942707d722ddf6a8.mockapi.io/api/cars <code>Header</code> Content-Type <code>Value</code> application/json <code>Output Variable Name</code> (click '+Add Variable') orderid <code>Response Entity</code> Body <code>Response Path</code> $.orderid <p>For 'Body' section use: </p><pre><code>{\n \"color\": \"$(n2.aiAgent.color)\",\n \"engine\": \"$(n2.aiAgent.engine)\",\n \"model\": \"$(n2.aiAgent.model)\",\n \"customer\": \"$(n2.aiAgent.customer)\"\n}\n</code></pre><p></p> <ul> <li>Click 'Save'.</li> </ul> <p></p> <ul> <li>Configure 'HTTP Request' node outcomes by dragging the orange, green, and red outcome dots to empty space on the canvas and selecting appropriate outcomes (e.g., 'onTimeout' - Error, 'onSuccess' - Success, 'onError' - Error).</li> </ul> <p> </p> <ul> <li>Next, click 'Flow Settings' (gear icon), navigate to 'Flow Outcomes', and expand 'Last Execution Status' outcome.</li> <li>Click 'Add New', use 'orderid' under 'Key' and '$(n3.orderid)' under 'Value'.</li> <li>Click 'Save'.</li> </ul> <p></p> <ul> <li>Make the flow live by clicking 'Make Live' (top right corner) and then clicking  'Make Live' again in the next dialog box.</li> </ul> <p></p>"},{"location":"Excercise2/#section-2-configure-ai-agent-car-order-action","title":"Section 2 - Configure AI Agent Car Order Action","text":"<ul> <li> <p>Navigate back to the AI Agent Studio and to your Autonomous Webex AI Agent.</p> </li> <li> <p>Select 'Actions' and click 'New Action'.</p> </li> </ul> <p></p> <ul> <li>Provide an 'Action Name' (use carordercreate).</li> <li>Provide the following 'Action description': <pre><code>Submit a car order when the customer chooses a model and all other customization options.  \nProvide orderid after a successful order.  \n</code></pre></li> <li>Under 'Action scope', select 'Slot filling and fulfillment'.</li> </ul> <p></p> <ul> <li>Select the service you created in the previous task under 'Select service' and the flow created above under 'Select a flow'.</li> </ul> <p></p> <ul> <li>Click 'New input entity'.</li> </ul> <p></p> <ul> <li>Add four entities for the Webex AI Agent to pass to the Webex Connect flow with the following parameters:</li> </ul> Entity name Entity type Entity description Entity examples Required model String Car model that the customer chose NovaTerra Yes color String Car color that the customer chose Ruby Red Yes engine String Engine type that the customer chose gas, electric Yes customer String Customer's name Jack, Nick Yes <p> </p> <ul> <li>Click 'Add' and Publish the changes. </li> </ul> <p></p>"},{"location":"Excercise2/#section-3-test-webex-ai-agent","title":"Section 3 - Test Webex AI Agent","text":"<ul> <li> <p>Let's test the logic by creating a new car order by going back to AI Agent Studio and selecting the Autonomous AI Agent created in exercise 1.</p> </li> <li> <p>Click 'Preview' and Verify the functionality by creating a car order. </p> </li> </ul> <p></p> <ul> <li>For guidance the screenshot provides an example of how an order is created. <ul> <li>First, the user expressed the intent to buy a new car. </li> <li>As per its instructions, the AI agent requested car details like the model, engine type, and color. </li> <li>When a detail was missed, the agent was able to ask the user to provide the missing parameter to complete the order. </li> <li>Once it received all the necessary information, it successfully created the order and provided the order details. </li> </ul> </li> </ul> <p></p> <ul> <li>In your case, you will see that the agent is not able to provide the order ID. Specifically asking the agent for the order ID was not helpful either.</li> </ul> <p></p> <ul> <li>To begin, verify the session details to confirm the agent's actions by going into the Agent and Sessions Section. </li> </ul> <p></p> <ul> <li> <p>Choose the latest Session ID. </p> </li> <li> <p>Note that the fulfillment was successful, and information was provided to the Connect Flow for order execution.</p> </li> </ul> <p></p> <ul> <li> <p>Next, lets examine the Connect Flow debugs to see how the information was executed. </p> </li> <li> <p>To access these, navigate to Control Hub &gt; Contact Center Quick Links &gt; Webex Connect, and then select the Connect service you created.</p> </li> </ul> <p></p> <ul> <li>Within the service, select your created Flow and click the Debug option on the right side. The Transaction Logs window will open.</li> </ul> <p></p> <ul> <li>First, click Decrypt Logs to convert the logs into text, then select the latest transaction. </li> </ul> <p></p> <ul> <li> <p>You will see three nodes being executed. </p> </li> <li> <p>The \"Configure AI Agent Event\" payload is constructed and passed to the \"HTTP Request Node.\"</p> </li> </ul> <p></p> <ul> <li>In the HTTP Request Node, you'll see the request data was constructed and the API was executed. However, the response data shows a status of 400 Bad Request, indicating the request was not processed due to an invalid request.</li> </ul> <p></p> <ul> <li> <p>The issue lies in the method selected to create the record. PUT is generally used for updating or replacing existing content, but for creating a new record, the correct method is POST.</p> </li> <li> <p>To correct this, select the Edit option in the flow. Then double click on the HTTP Request Node and change the Method from PUT to POST.</p> </li> </ul> <p></p> <ul> <li> <p>Save the flow and make it Live.</p> </li> <li> <p>Create a car order again from Preview chat, and the execution should now be successful with AI agent returning an Order ID.</p> </li> </ul> <p></p> <ul> <li>You can also access the datastore where these orders are stored and updated by entering the following URL into your browser:</li> </ul> <p>Car Orders</p> <p></p> <p>Congratulations!  - You have successfully completed this task and the lab! If you'd like, you can also explore Bonus excercise 5 to dive and see how the orders can be modified. </p>"},{"location":"Excercise3/","title":"Lab 3 - Create and Test Voice Flows for Webex AI Agents","text":""},{"location":"Excercise3/#lab-3-create-and-test-voice-flows-for-webex-ai-agents","title":"Lab 3 - Create and Test Voice Flows for Webex AI Agents","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai  (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1!"},{"location":"Excercise3/#objective","title":"Objective","text":"<p>This lab exercise aims to guide participants in creating and configuring a voice flow for an Autonomous Webex AI Agent that was set up in a previous exercise. Participants will then interact with the AI Agent via a phone call to test the voice flow. </p> <p>This exercise will also provide an opportunity to experience the AI Assistant feature of the contact center by highlighting the virtual agent's conversation summary when the call is escalated to a live agent</p>"},{"location":"Excercise3/#section-1-voice-flow-configuration","title":"Section 1 - Voice flow configuration","text":"<ul> <li>Navigate to the Control Hub and log in using the credentials provided above.</li> <li>After logging in to the Control Hub, navigate to the 'Flows' menu on the-left hand side.</li> <li>Click 'Manage Flows' and select 'Create Flows'.</li> </ul> <ul> <li>When prompted to 'Choose a method', select 'Flow Templates'.</li> </ul> <ul> <li>Choose 'AI Agent Autonomous (Package Tracking)', click 'Next', provide a flow name (e.g., 'ai_agent_autonomous_andy'), and click 'Create Flow'.</li> </ul> <ul> <li>Once the flow loads, click on the 'VirtualAgentV2' node and select the Webex AI Agent (created in Excercise 1) under 'Virtual Agent'.</li> </ul> <ul> <li>Click on the 'QueueContact' node and select 'WebexOne_AIQueue_N' (where 'N' is your lab user number).</li> </ul> <ul> <li>Click on an empty space in the flow, then on the right-hand side, navigate to 'Global Variables'. Click on 'Global_VoiceName', select edit option (pencil icon), use 'en-US-Jess' for 'Default Value', and click 'Save'.</li> </ul> <p>Note</p> <pre><code>Instead of Jess as the voice, you can choose different voice options like **'en-US-Maria'** and **'en-US-Henry'**. Supported voice languages for AI agents can be checked via &lt;a href=\"https://help.webex.com/en-us/article/pdef2d/Supported-languages-and-voices-for-AI-agents\" target=\"_blank\"&gt;Supported Languages and Voices for AI agents.\n</code></pre> <ul> <li>Turn Flow Validation 'On' by clicking the 'Validation' button at the bottom of the page to publish the flow. Once validation is complete, click 'Publish Flow' and then 'Publish Flow' again in the next dialog box (Latest version label is selected automatically).</li> </ul> <p></p> <ul> <li> <p>Navigate to 'Channels' menu in the Webex Contact Center configuration.</p> </li> <li> <p>Open 'WebexOne_AI_EntryPoint_N' (_where 'N' is your lab user number), associate your created flow under 'Routing Flow' (note down the 'Support Number' associated with this channel - it will be needed later in this lab for testing), and click 'Save'.</p> </li> </ul> <p> </p>"},{"location":"Excercise3/#section-2-verifying-voice-flow-agent-handover-and-ai-assistant-summary","title":"Section 2 - Verifying Voice Flow, Agent Handover and AI Assistant Summary","text":"<ul> <li>Log in to the Webex Contact Center Agent Desktop:<ul> <li>For the phone number, select 'Desktop' </li> <li>For the team use WebexOne_Team_N (where 'N' is your lab user number)'.</li> </ul> </li> </ul> <ul> <li> <p>Call the channel number (from the steps above), interact with the Webex AI Agent and order the car and get the order ID. </p> </li> <li> <p>When you interact with the AI agent, you might notice a couple of issues.</p> </li> <li> <p>First, the bot may not be able to answer. This could be due to the agent's AI engine. If you notice this issue, you can change the AI engine to Webex AI Pro-Us 1.0 in the configured AI Agent Profile and test the call again. </p> </li> </ul> <p></p> <ul> <li> <p>Second you may notice that the Agent may quickly conclude the call without taking an order or completing the transaction. </p> </li> <li> <p>This is likely related to the termination delay setting, which may be set for too small a window.</p> </li> <li> <p>To fix this, follow these steps:</p> </li> <li> <p>In the Flow section of the voice flow you created, select the VirtualAgentV2 node.</p> </li> </ul> <p></p> <ul> <li>Under Advanced Settings, you'll see the timeout is set to 15 seconds.</li> </ul> <p></p> <ul> <li>Increase this timeout to 30 seconds and publish the flow.</li> </ul> <p>Note</p> <pre><code>Detailed instructions on how to edit and republish flows have not been provided intentionally, as these steps were performed earlier in the lab.\n</code></pre> <ul> <li>Retest the flow by calling in again and place a successfull order. </li> </ul> <p>Congratulations!  - You have completed this task and the lab!</p>"},{"location":"Excercise4/","title":"Lab 4 - Explore Webex AI Assistant","text":""},{"location":"Excercise4/#excercise-4-explore-webex-ai-assistant-feature","title":"Excercise 4 - Explore Webex AI Assistant Feature","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai  (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1!"},{"location":"Excercise4/#objective","title":"Objective","text":"<p>This lab's objective is to provide participants with a basic understanding of the AI Assistant feature in the Webex Contact Center and demonstrate how it enhances the live agent experience.</p> <p>Building on previous labs that showcased how Webex AI Agents assist customers with inquiries and actionable tasks, this lab will focus on the AI Assistant's role when a customer's call is escalated to a live agent. You will explore, configure, and test the following AI capabilities:</p> <ul> <li> <p>AI Agent Transfer Summaries : See how the AI provides a summary of the conversation when a virtual agent transfers a call to a human agent, giving the agent full context.</p> </li> <li> <p>Call Drop Summaries : Learn how the AI generates a summary for a new agent if a customer's call is disconnected and they call back, ensuring they don't have to repeat themselves.</p> </li> <li> <p>Real-time Transcriptions : Experience how this feature provides a live, real-time transcription of the conversation for agents , improving clarity and customer satisfaction.</p> </li> </ul>"},{"location":"Excercise4/#section-1-ai-agent-transfer-summary","title":"Section 1: AI Agent Transfer Summary","text":"<ul> <li> <p>To achieve this objective, we must first ensure that the all the summary and transcripts feature is enabled for the tenant. </p> </li> <li> <p>To check this, Log in to https://admin.webex.com with the provided credentials.</p> </li> <li> <p>In Control Hub, under Services, click on Contact Center. Then, under Contact Center navigation pane on the left side, scroll down to DESKTOP EXPEREINCE section and click on Cisco AI Assistant.</p> <p></p> </li> <li> <p>Ensure that the \"Call Drop Summary\" , \"Virtual Agent Transfer Summary\" &amp; \"Real Time Transcripts\"  toggle is enabled.</p> <p></p> </li> <li> <p>The next step is to configure the AI Assistant widget for agent use. </p> </li> <li> <p>To accomplish this, the agent's desktop layout must include the \"ai-assistant\" JSON string in the Agent &gt; Advanced Header section</p> </li> <li> <p>You can review this in Control Hub by navigating to \"Desktop Layouts\" within the \"Desktop Experience\" section of the Contact Center services.</p> <p></p> </li> <li> <p>Search and Open the layout Wx1_Desktop_AI_Assistant and download the file Wx1_Desktop_AI_Assistant.json.</p> <p></p> </li> <li> <p>Review the file in a text editor. </p> </li> <li> <p>In the Agent &gt; Advanced Header section , you should see the verbiage highlighted in this screenshot</p> <p></p> </li> <li> <p>To have a desktop layout reflected for agents, it must be mapped to their teams.</p> </li> <li> <p>From User Management section of Control Hub, select Teams and search for your team WebexOne_Team_num you want to update.</p> <p></p> </li> <li> <p>In the Desktop Layout field of the team setting, ensure that the layout  Wx1_Desktop_AI_Assistant is selected and saved.</p> <p></p> </li> <li> <p>Now, log in to the Agent Desktop using the provided credentials.</p> <ul> <li>URL: https://desktop.wxcc-us1.cisco.com/</li> <li>Username: <code>Contact the lab proctor if information is unavailable.</code> </li> <li>Password: <code>Contact the lab proctor if information is unavailable.</code></li> </ul> </li> <li> <p>Please select Desktop as the telephony option and set the Team as WebexOne_Team_num</p> </li> </ul> <p></p> <ul> <li> <p>This will load the layout as configured above.</p> </li> <li> <p>You will notice the AI Assistant and its capabilities loaded.</p> <p></p> </li> <li> <p>Ensure the agent is set to the \"Available\" state.</p> </li> <li> <p>Using your cell phone, call the same number as in previous excercise. </p> </li> <li> <p>After speaking briefly with the AI agent, you can escalate the call to a live agent by saying, I want to speak to an agent.</p> </li> <li> <p>Switch the agent to 'Available' state on the Webex Contact Center Agent Desktop and accept the call.</p> </li> <li> <p>Observe the AI Assistant summary of your conversation with the agent and all the interactions with the AI agent in the IVR transcripts section. </p> </li> </ul> <p> </p> <ul> <li>Have a brief conversation with the agent, ensure it's not more than 10 or 15 seconds long, and end the call from the cell phone. </li> </ul>"},{"location":"Excercise4/#section-2-call-drop-summary","title":"Section 2: Call Drop Summary","text":"<ul> <li> <p>Now, if another call is made that is escalated and presented to an agent, you might expect a call drop summary to appear when the agent accepts the call.</p> </li> <li> <p>Let's make a call and observe the behavior.</p> </li> <li> <p>You will notice that the summary is not generated when the call is presented to the agent and they answer it.</p> </li> </ul> <p></p> <ul> <li> <p>This time, continue the conversation with the agent for more than 40 seconds, then end the call from the caller's end.</p> </li> <li> <p>Now, when you call back and the agent accepts the call, the call drop summary will be generated.</p> </li> </ul> <p></p> <ul> <li> <p>The reason this works is that the call has met the following criteria:</p> <ul> <li>Recording for these calls is enabled.</li> <li>The callback to the contact center is within a 24-hour window.</li> <li>The callback came from the same phone number (ANI) as the original call.</li> <li>The call was longer than 30 seconds.</li> </ul> </li> <li> <p>More details can be reviewed in this section Frequently Asked Questions (FAQs) </p> </li> </ul>"},{"location":"Excercise4/#section-3-real-time-transcription","title":"Section 3: Real Time Transcription","text":"<ul> <li> <p>Real-time transcriptions feature allows agents to access real-time conversation with the caller on their Agent Desktop, enabling them to follow conversations more accurately and respond effectively.</p> </li> <li> <p>While completing the \"Call Drop Summary\" exercise, you may have noticed that transcripts were not visible for the calls, even though the option was enabled in Control Hub along with the \"Call Drop Summary\" feature.</p> <p></p> </li> <li> <p>This is because, in addition to the tenant-level settings, a \"Media Stream\" activity must be triggered directly after the agent answers the call.</p> </li> <li> <p>This can be achieved in a flow in one of two ways:</p> <ul> <li>Enable media stream for all queues in the flow.</li> <li>Enable media stream for specific queues in the flow.</li> </ul> </li> <li> <p>For this exercise, we will proceed by enabling media stream for all queues in the flow as we have only one queue. </p> </li> <li> <p>In Control Hub go to the Flows menu on the left-hand side.</p> <p></p> </li> <li> <p>Search for and select the voice flow you created for the AI Agent exercise.</p> </li> <li> <p>On the event flow canvas, click the Edit option.</p> <p></p> </li> <li> <p>Add a Start Media Stream activity node directly after the AgentAnswered event. Make sure the activity is connected to the End Flow Node.</p> <p></p> </li> <li> <p>Validate and Publish the flow. This will enable real-time transcription for every call routed through this flow.</p> <p></p> </li> <li> <p>Now, lets test the transcription feature </p> </li> <li> <p>Ensure your agent is logged in and set to available.</p> </li> <li> <p>Make a call and after the interaction with the AI agent, escalate the call to your agent.</p> </li> <li> <p>Accept the call and observe the conversation being converted into real-time transcripts in the Transcripts gadget.</p> <p> </p> </li> <li> <p>If your business requires enabling real-time streaming for specific queues only, you can follow the instructions in the provided document at Enabling media streaming for specific queues </p> </li> </ul>"},{"location":"Excercise4/#results","title":"Results","text":"<p>Congratulations, In this lab, you learned how the AI Assistant enhances the live agent experience. By providing AI Agent Transfer Summaries and Call Drop Summaries, the assistant gives agents instant context. Paired with Real-time Transcriptions, these features ensure agents are always well-informed, leading to more efficient and satisfying customer interactions.</p>"},{"location":"Excercise5/","title":"Lab 5 - (Bonus) Car Order Actions with Webex AI Agent","text":""},{"location":"Excercise5/#excercise-5-bonus-car-order-actions-with-webex-ai-agent","title":"Excercise 5 - (Bonus) Car Order Actions with Webex AI Agent","text":"<p>Please use the following credentials to connect to Control Hub and configure Webex Contact Center:</p> <code>Control Hub URL</code> https://admin.webex.com <code>Username</code> labuserID@wx1.wbx.ai (where ID is your assigned pod number; this ID will be provided by your proctor) <code>Password</code> webexONE1!"},{"location":"Excercise5/#steps","title":"Steps","text":"<p>To make the AI Agent more capable, additional bot actions are needed. The configuration process is very similar to the one completed above for order creation. For simplicity, Webex Connect flows for these next actions are already prebuilt and will not require manual configuration.</p> <p>Car order check action</p> <ul> <li>In the AI Agent Studio, navigate to your Autonomous Webex AI Agent.</li> <li>Select 'Actions' and click 'New Action'.</li> <li>Provide 'Action Name' (use carordercheck).</li> <li>Provide the follwoing 'Action description': <pre><code>Check an existing car order and provide details about the order - model, color, engine type, and orderid.  \n</code></pre></li> <li>Under 'Action scope', select 'Slot filling and fulfillment'.</li> </ul> <p></p> <ul> <li>Select the prebuilt service CiscoLive25AIAgentFlows under 'Select service' and the carordercheck flow under 'Select a flow'.</li> </ul> <p></p> <ul> <li>Click 'New input entity'.</li> </ul> Entity name Entity type Entity description Entity examples Required orderid String orderid provided by the customer 5345321 Yes <p></p> <ul> <li>Click 'Add'.</li> </ul> <p>Car order modify action</p> <ul> <li>In the AI Agent Studio, navigate to your Autonomous Webex AI Agent.</li> <li>Select 'Actions' and click 'New Action'.</li> <li>Provide 'Action Name' (use carordermodify).</li> <li>Provide the following 'Action description': <pre><code>Collect the orderid  and modify the order as per the customer's request. \n</code></pre></li> <li>Under 'Action scope', select 'Slot filling and fulfillment'.</li> </ul> <p></p> <ul> <li>Select the prebuilt service CiscoLive25AIAgentFlows under 'Select service' and the carordermodify flow under 'Select a flow'.</li> </ul> <p></p> <ul> <li>Add five entities for the Webex AI Agent to pass to the Webex Connect flow.</li> <li>Click 'New input entity'.</li> </ul> Entity name Entity type Entity description Entity examples Required orderid String Order Id of the existing order 5345321 Yes model String Car model that the customer chose NovaTerra No color String Car color that the customer chose Ruby Red No engine String Engine type that the customer chose gas, electric No customer String Customer's name Jack, Nick No <ul> <li>Click 'Add'.</li> </ul> <p></p> <p>Car order delete action</p> <ul> <li>In the AI Agent Studio, navigate to your Autonomous Webex AI Agent.</li> <li>Select 'Actions' and click 'New Action'.</li> <li>Provide 'Action Name' (use carorderdelete).</li> <li>Provide the follwoing 'Action description': <pre><code>Delete the order when requested.\n</code></pre></li> <li>Under 'Action scope', select 'Slot filling and fulfillment'.</li> </ul> <p></p> <ul> <li>Select the prebuilt service CiscoLive25AIAgentFlows under 'Select service' and the carorderdelete flow under 'Select a flow'.</li> </ul> <p></p> <ul> <li>Click 'New input entity'.</li> </ul> Entity name Entity type Entity description Entity examples Required orderid String Orderid provided by the customer 5345321 Yes <ul> <li>Click 'Add'.</li> </ul> <p></p> <ul> <li>Save the Webex AI Agent configuration by clicking 'Save Changes', and publish by clicking 'Publish' (provide comments for version tracking purposes).</li> </ul> <p> </p> <ul> <li>Congratulations! You have completed this task.</li> </ul>"},{"location":"conclusion/","title":"Conclusion","text":""},{"location":"conclusion/#conclusion","title":"Conclusion","text":"<p>Congratulations on completing the Autonomous AI agent lab! You've successfully learned how an AI Assistant can significantly enhance the live agent experience. By providing an AI Agent Transfer Summary and a Call Drop Summary, the assistant gives agents instant context, allowing them to quickly understand the customer's needs. When combined with real-time transcriptions, these features ensure agents are always well-informed, leading to more efficient and satisfying customer interactions.</p> <p>You have also successfully completed the exercise of enhancing the AI bot to fulfill actions! This is a huge step in building a more capable and autonomous agent.</p>"},{"location":"lab1_getting_started/","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#lab-1-getting-started","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#section-1","title":"Section 1","text":"<p>Please use the following credentials to connect to device:</p> <code>IP Address</code> 1.1.1.1 <code>Username</code> admin <code>Password</code> C1sco123 <p>My content</p> <p>Note</p> <p>This is a note</p> <p>Cisco IOS code block:</p> <pre><code>hostname ABC\ninterface GigabitEthernet1\n ip address 122.1.1.1\n</code></pre> <p>Image:</p> <p></p>"},{"location":"lab1_getting_started/#section-2","title":"Section 2","text":"<p>More content</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":""},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>This lab series focuses on building, configuring, and testing Autonomous Webex AI Agents. You'll start by setting up these agents and their knowledge base, enabling them to answer queries from a knowledge repository.</p> <p>The labs then guide you through creating and managing agent actions using Webex Connect flows, which allow the AI to interact with external APIs and fulfill requests. You'll also learn to configure a voice flow and test the AI agent's functionality by making a phone call.</p> <p>Finally, the series highlights the AI Assistant feature within the Webex Contact Center. You'll explore how this AI enhances the live agent experience by providing conversation summaries when a call is transferred or disconnected and offering real-time transcriptions to improve clarity and efficiency.</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>This lab leverages Webex Contact Center cloud environment.</p>"},{"location":"topologies/","title":"Lab topologies","text":""},{"location":"topologies/#lab-topologies","title":"Lab topologies","text":""},{"location":"howToUse/admonition/","title":"Custom Admonitions","text":"<p>In addition to the  stock admonitions which are available out of the box we have added some additional branded admonitions which were created by Bobby McGonigle. </p> <p>Blank</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Blank!')\n</code></pre> <p>Vidcast</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Vidcast!')\n</code></pre> <p>Download</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Download!')\n</code></pre> <p>Cedeploy</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Ce-Deploy!')\n</code></pre> <p>Webex</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Webex!')\n</code></pre> <p>Gif</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('How should I pronounce Gif?')\n</code></pre> <p>Important</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Important!')\n</code></pre> <p>Challenge</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Challenge!')\n</code></pre> <p>Tool</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Tool!')\n</code></pre> <p>Curious</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Curious!')\n</code></pre>"},{"location":"howToUse/customFeatures/","title":"Custom Features","text":""},{"location":"howToUse/customFeatures/#adding-a-copy-button-without-a-code-block","title":"Adding a Copy Button Without a Code Block","text":"<p><code>This will copy the following text: &lt;copy&gt;Text to copy&lt;/copy&gt;</code> </p> <p>This will copy the following text: Text to copy</p>"},{"location":"howToUse/customFeatures/#adding-user-specific-variables-into-your-lab-guide","title":"Adding user specific variables into your lab guide","text":"<p>There may be times in which you want to embed some attendee specific information into the instructions of your lab guide, like credentials or phone numbers, which will be used on multiple pages of your lab guide.  You can gather the information via a form or you can pass a pre-encoded JSON string as a URL parameter to populate the variable values into the browser's session storage.  Then you can use a simple HTML tag with a special class name to update the values in the lab guide.  This feature can be combined with the copy button method above.</p>"},{"location":"howToUse/customFeatures/#form-method","title":"Form Method","text":"Show me the code <pre><code>&lt;form id=\"info\"&gt;\n\n\n&lt;label for=\"Admin\"&gt;Admin Login:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Admin\" name=\"Admin\"&gt;&lt;br&gt;\n\n&lt;label for=\"PW\"&gt;Admin Password:&lt;/label&gt;\n&lt;input type=\"text\" id=\"PW\" name=\"PW\"&gt;&lt;br&gt;\n\n&lt;label for=\"EP\"&gt;Inbound Channel Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"EP\" name=\"EP\"&gt;&lt;br&gt;\n\n&lt;label for=\"DN\"&gt;Inbound Channel Phone Number:&lt;/label&gt;\n&lt;input type=\"text\" id=\"DN\" name=\"DN\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue\"&gt;Queue 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue\" name=\"Queue\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue2\"&gt;Queue 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue2\" name=\"Queue2\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team\"&gt;Team 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team\" name=\"Team\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team2\"&gt;Team 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team2\" name=\"Team2\"&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;button onclick=\"setValues()\"&gt;Update Lab Guide&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Example Input Form Admin Login: Admin Password: Inbound Channel Name: Inbound Channel Phone Number: Queue 1 Name: Queue 2 Name: Team 1 Name: Team 2 Name: Update Lab Guide <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned Team name 2: Provided by proctor</p>"},{"location":"howToUse/customFeatures/#url-method","title":"URL Method","text":"<p>If you have a lot of attendee variables in your lab, you may choose to precompile and encode them so that you can simply provide a URL link which will load all of their required information.</p> <p>To see this in action, add this string at the end of the URL for any page on this site: ?eyJBZG1pbiI6ImFkbWluQHh5ei5iaXoiLCJQVyI6InNVcGVyU2VjcmV0MTIzISIsIkVQIjoiRVAxIiwiRE4iOiIrMTkxMDU1NTEyMTUyIiwiUXVldWUiOiJRdWV1ZTEiLCJRdWV1ZTIiOiJRdWV1ZTIiLCJUZWFtIjoiVGVhbTEiLCJUZWFtMiI6IlRlYW0yIn0=</p>"},{"location":"howToUse/initialSetup/","title":"Initial Setup","text":""},{"location":"howToUse/initialSetup/#initial-setup","title":"Initial Setup","text":"<p>This lab guide template uses MKDocs to take your markdown documentation and transform it into an interactive web based lab guide.  You will need to install some software on your PC or Mac in order to take full advantage of the tool which will allow you to view your changes as you save them and ensure that your formatting is exactly how you want it.</p>"},{"location":"howToUse/initialSetup/#prerequisite-software-to-install","title":"Prerequisite Software to Install","text":"<ol> <li>Python</li> <li>Visual Studio Code</li> <li>Git</li> </ol>"},{"location":"howToUse/initialSetup/#setting-up-your-lab-guide-on-your-computer","title":"Setting up your lab guide on your computer","text":""},{"location":"howToUse/initialSetup/#clone-your-repository-with-git","title":"Clone your repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source:  {{config.extra.repo}}</p> <p>Select or create a new folder to clone the repository into.</p>"},{"location":"howToUse/initialSetup/#build-the-environment","title":"Build the environment","text":"<p>When prompted to open the cloned repository, select open.</p> <p>Drag open the terminal at the bottom of the Visual Studio Code window</p> Show Me <p></p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p> <p>venv\\Scripts\\activate.ps1</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000 </p> <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>source venv/bin/activate</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/postInitial/","title":"Using the tool after the initial setup","text":""},{"location":"howToUse/postInitial/#using-the-tool-after-the-initial-setup","title":"Using the tool after the initial setup","text":"<p>After the initial setup you will only need to take the following steps:</p> <p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Open Folder and navigate to the folder where you cloned the repository</p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>venv\\Scripts\\activate.ps1</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p> <p>In your terminal enter the following commands:</p> <p>source venv/bin/activate</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/references/","title":"Markdown and Other References","text":""},{"location":"howToUse/references/#mk-docs-feature-reference","title":"MK Docs Feature Reference:","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/ </p>"},{"location":"howToUse/references/#markdown-cheat-sheets","title":"Markdown Cheat Sheets:","text":"<p>https://www.markdownguide.org/cheat-sheet/ </p> <p>https://github.com/lifeparticle/Markdown-Cheatsheet </p>"},{"location":"howToUse/syncChanges/","title":"Publishing your changes","text":""},{"location":"howToUse/syncChanges/#publishing-your-changes","title":"Publishing Your Changes","text":"<p>As you progress with the creation of your lab guide, you should sync your changes periodically to GitHub.  </p>"},{"location":"howToUse/syncChanges/#syncing-your-changes-to-github","title":"Syncing your changes to GitHub","text":"<p>Make sure that you have saved all of the files you want to sync up to the repository</p> <p>Click the Source Control button in the left menu </p> <p>Click the plus sign next to each file you want to sync as you hover over the file names or alternatively, click the plus sign next to changes</p> <p>Enter a note about the changes you are making in the message text box</p> <p>Click the down chevron  on the commit button to reveal more options</p> <p>Select Commit &amp; Sync </p>"},{"location":"howToUse/syncChanges/#after-you-sync-your-changes-it-will-take-a-few-minutes-for-github-actions-to-build-the-website-so-that-you-can-view-all-of-the-changes-you-made","title":"After you Sync your changes, it will take a few minutes for GitHub Actions to build the website so that you can view all of the changes you made.","text":""}]}